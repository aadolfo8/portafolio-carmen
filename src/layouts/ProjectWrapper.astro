---

---

<main class="main-project">
  <slot />

  <div id="loader">
    <div class="wrapper">
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="circle"></div>
      <div class="shadow"></div>
      <div class="shadow"></div>
      <div class="shadow"></div>
    </div>
  </div>
</main>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const loader = document.querySelector("#loader");
    const videos = document.querySelectorAll("video");
    const images = document.querySelectorAll("img");
    const iframes = document.querySelectorAll("iframe");
    const content = document.querySelector("#content");

    let totalAssets = videos.length + images.length + iframes.length; // Total de elementos a cargar
    let loadedAssets = 0; // Contador de elementos cargados

    const assetLoaded = () => {
      loadedAssets += 1;
      if (loadedAssets === totalAssets) {
        hideLoader(); // Oculta el loader si todo está cargado antes de los 2 segundos
      }
    };

    const hideLoader = () => {
      if (loader) (loader as HTMLElement).style.display = "none";
      if (content) (content as HTMLElement).style.display = "block";
    };

    // Escucha eventos de carga para videos
    videos.forEach((video) => {
      video.addEventListener("canplaythrough", assetLoaded, { once: true });
    });

    // Escucha eventos de carga para imágenes
    images.forEach((image) => {
      if (image.complete) {
        assetLoaded();
      } else {
        image.addEventListener("load", assetLoaded, { once: true });
        image.addEventListener("error", assetLoaded, { once: true });
      }
    });

    // Escucha eventos de carga para iframes
    iframes.forEach((iframe) => {
      iframe.addEventListener("load", assetLoaded, { once: true });
      iframe.addEventListener("error", assetLoaded, { once: true });
    });

    // Fija un temporizador de 2 segundos para ocultar el loader
    setTimeout(() => {
      hideLoader();
    }, 2000); // 2 segundos
  });
</script>

<style is:global>
  .main-project {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-top: 90px;
  }

  #loader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(
      255,
      255,
      255,
      0.9
    ); /* Fondo blanco semi-transparente */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 9999;
  }

  /* Esconde el contenido principal mientras carga */
  #content {
    display: none;
  }

  /* From Uiverse.io by mobinkakei */
  .wrapper {
    width: 200px;
    height: 60px;
    position: relative;
    z-index: 1;
  }

  .circle {
    width: 20px;
    height: 20px;
    position: absolute;
    border-radius: 50%;
    background-color: #000000;
    left: 15%;
    transform-origin: 50%;
    animation: circle7124 0.5s alternate infinite ease;
  }

  @keyframes circle7124 {
    0% {
      top: 60px;
      height: 5px;
      border-radius: 50px 50px 25px 25px;
      transform: scaleX(1.7);
    }

    40% {
      height: 20px;
      border-radius: 50%;
      transform: scaleX(1);
    }

    100% {
      top: 0%;
    }
  }

  .circle:nth-child(2) {
    left: 45%;
    animation-delay: 0.2s;
  }

  .circle:nth-child(3) {
    left: auto;
    right: 15%;
    animation-delay: 0.3s;
  }

  .shadow {
    width: 20px;
    height: 4px;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.9);
    position: absolute;
    top: 62px;
    transform-origin: 50%;
    z-index: -1;
    left: 15%;
    filter: blur(1px);
    animation: shadow046 0.5s alternate infinite ease;
  }

  @keyframes shadow046 {
    0% {
      transform: scaleX(1.5);
    }

    40% {
      transform: scaleX(1);
      opacity: 0.7;
    }

    100% {
      transform: scaleX(0.2);
      opacity: 0.4;
    }
  }

  .shadow:nth-child(4) {
    left: 45%;
    animation-delay: 0.2s;
  }

  .shadow:nth-child(5) {
    left: auto;
    right: 15%;
    animation-delay: 0.3s;
  }
</style>
